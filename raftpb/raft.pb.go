// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raft.proto

/*
Package raftpb is a generated protocol buffer package.

It is generated from these files:
	raft.proto

It has these top-level messages:
	RequestVoteRequest
	RequestVoteResponse
	AppendEntriesRequest
	AppendEntriesResponse
	LogEntry
	WriteRequest
	WriteResponse
	DumpStateRequest
	DumpStateResponse
*/
package raftpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RequestVoteRequest struct {
	Term         uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	CandidateId  string `protobuf:"bytes,2,opt,name=candidate_id,json=candidateId" json:"candidate_id,omitempty"`
	LastLogTerm  uint64 `protobuf:"varint,3,opt,name=last_log_term,json=lastLogTerm" json:"last_log_term,omitempty"`
	LastLogIndex uint64 `protobuf:"varint,4,opt,name=last_log_index,json=lastLogIndex" json:"last_log_index,omitempty"`
}

func (m *RequestVoteRequest) Reset()                    { *m = RequestVoteRequest{} }
func (m *RequestVoteRequest) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteRequest) ProtoMessage()               {}
func (*RequestVoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RequestVoteRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteRequest) GetCandidateId() string {
	if m != nil {
		return m.CandidateId
	}
	return ""
}

func (m *RequestVoteRequest) GetLastLogTerm() uint64 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

func (m *RequestVoteRequest) GetLastLogIndex() uint64 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

type RequestVoteResponse struct {
	Term        uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	VoteGranted bool   `protobuf:"varint,2,opt,name=vote_granted,json=voteGranted" json:"vote_granted,omitempty"`
}

func (m *RequestVoteResponse) Reset()                    { *m = RequestVoteResponse{} }
func (m *RequestVoteResponse) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteResponse) ProtoMessage()               {}
func (*RequestVoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RequestVoteResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteResponse) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

type AppendEntriesRequest struct {
	Term              uint64      `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	LeaderId          string      `protobuf:"bytes,2,opt,name=leader_id,json=leaderId" json:"leader_id,omitempty"`
	PrevLogTerm       uint64      `protobuf:"varint,3,opt,name=prev_log_term,json=prevLogTerm" json:"prev_log_term,omitempty"`
	PrevLogIndex      uint64      `protobuf:"varint,4,opt,name=prev_log_index,json=prevLogIndex" json:"prev_log_index,omitempty"`
	LeaderCommitIndex uint64      `protobuf:"varint,5,opt,name=leader_commit_index,json=leaderCommitIndex" json:"leader_commit_index,omitempty"`
	Entries           []*LogEntry `protobuf:"bytes,6,rep,name=entries" json:"entries,omitempty"`
}

func (m *AppendEntriesRequest) Reset()                    { *m = AppendEntriesRequest{} }
func (m *AppendEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesRequest) ProtoMessage()               {}
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AppendEntriesRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesRequest) GetLeaderId() string {
	if m != nil {
		return m.LeaderId
	}
	return ""
}

func (m *AppendEntriesRequest) GetPrevLogTerm() uint64 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntriesRequest) GetPrevLogIndex() uint64 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *AppendEntriesRequest) GetLeaderCommitIndex() uint64 {
	if m != nil {
		return m.LeaderCommitIndex
	}
	return 0
}

func (m *AppendEntriesRequest) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type AppendEntriesResponse struct {
	Term    uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *AppendEntriesResponse) Reset()                    { *m = AppendEntriesResponse{} }
func (m *AppendEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesResponse) ProtoMessage()               {}
func (*AppendEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AppendEntriesResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type LogEntry struct {
	Term  uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Index uint64 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Data  []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LogEntry) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *LogEntry) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *LogEntry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type WriteRequest struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *WriteRequest) Reset()                    { *m = WriteRequest{} }
func (m *WriteRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()               {}
func (*WriteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *WriteRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type WriteResponse struct {
}

func (m *WriteResponse) Reset()                    { *m = WriteResponse{} }
func (m *WriteResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteResponse) ProtoMessage()               {}
func (*WriteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type DumpStateRequest struct {
}

func (m *DumpStateRequest) Reset()                    { *m = DumpStateRequest{} }
func (m *DumpStateRequest) String() string            { return proto.CompactTextString(m) }
func (*DumpStateRequest) ProtoMessage()               {}
func (*DumpStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type DumpStateResponse struct {
	State string `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
}

func (m *DumpStateResponse) Reset()                    { *m = DumpStateResponse{} }
func (m *DumpStateResponse) String() string            { return proto.CompactTextString(m) }
func (*DumpStateResponse) ProtoMessage()               {}
func (*DumpStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DumpStateResponse) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func init() {
	proto.RegisterType((*RequestVoteRequest)(nil), "RequestVoteRequest")
	proto.RegisterType((*RequestVoteResponse)(nil), "RequestVoteResponse")
	proto.RegisterType((*AppendEntriesRequest)(nil), "AppendEntriesRequest")
	proto.RegisterType((*AppendEntriesResponse)(nil), "AppendEntriesResponse")
	proto.RegisterType((*LogEntry)(nil), "LogEntry")
	proto.RegisterType((*WriteRequest)(nil), "WriteRequest")
	proto.RegisterType((*WriteResponse)(nil), "WriteResponse")
	proto.RegisterType((*DumpStateRequest)(nil), "DumpStateRequest")
	proto.RegisterType((*DumpStateResponse)(nil), "DumpStateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Raft service

type RaftClient interface {
	RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error)
	AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	DumpState(ctx context.Context, in *DumpStateRequest, opts ...grpc.CallOption) (*DumpStateResponse, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	out := new(RequestVoteResponse)
	err := grpc.Invoke(ctx, "/Raft/RequestVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := grpc.Invoke(ctx, "/Raft/AppendEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := grpc.Invoke(ctx, "/Raft/Write", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) DumpState(ctx context.Context, in *DumpStateRequest, opts ...grpc.CallOption) (*DumpStateResponse, error) {
	out := new(DumpStateResponse)
	err := grpc.Invoke(ctx, "/Raft/DumpState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Raft service

type RaftServer interface {
	RequestVote(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error)
	AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error)
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	DumpState(context.Context, *DumpStateRequest) (*DumpStateResponse, error)
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Raft/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).RequestVote(ctx, req.(*RequestVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Raft/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).AppendEntries(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Raft/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_DumpState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).DumpState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Raft/DumpState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).DumpState(ctx, req.(*DumpStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVote",
			Handler:    _Raft_RequestVote_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _Raft_AppendEntries_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Raft_Write_Handler,
		},
		{
			MethodName: "DumpState",
			Handler:    _Raft_DumpState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 454 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0x95, 0xdd, 0xb6, 0xdb, 0x4c, 0xda, 0x85, 0xba, 0x5d, 0x14, 0x95, 0x4b, 0x31, 0x08,
	0x95, 0x8b, 0x0f, 0xe5, 0xc2, 0x09, 0x89, 0x3f, 0x2b, 0x58, 0xa9, 0xa7, 0x80, 0x40, 0xe2, 0x52,
	0x79, 0xeb, 0xd9, 0x2a, 0x52, 0x1b, 0x07, 0xdb, 0x5d, 0xc1, 0x83, 0xf0, 0x76, 0x9c, 0x79, 0x0e,
	0xe4, 0x3f, 0x0d, 0xc9, 0x36, 0xec, 0xcd, 0xfe, 0xfc, 0xcd, 0xe4, 0xfb, 0x8d, 0x26, 0x00, 0x8a,
	0xdf, 0x18, 0x56, 0x2a, 0x69, 0x24, 0xfd, 0x15, 0x01, 0xc9, 0xf0, 0xfb, 0x1e, 0xb5, 0xf9, 0x22,
	0x0d, 0x86, 0x23, 0x21, 0xd0, 0x31, 0xa8, 0x76, 0x69, 0x34, 0x8b, 0xe6, 0x9d, 0xcc, 0x9d, 0xc9,
	0x13, 0x18, 0xac, 0x79, 0x21, 0x72, 0xc1, 0x0d, 0xae, 0x72, 0x91, 0x9e, 0xcc, 0xa2, 0x79, 0x9c,
	0x25, 0x95, 0x76, 0x25, 0x08, 0x85, 0xe1, 0x96, 0x6b, 0xb3, 0xda, 0xca, 0xcd, 0xca, 0xd5, 0x9f,
	0xba, 0xfa, 0xc4, 0x8a, 0x4b, 0xb9, 0xf9, 0x6c, 0xdb, 0x3c, 0x83, 0xf3, 0xca, 0x93, 0x17, 0x02,
	0x7f, 0xa4, 0x1d, 0x67, 0x1a, 0x04, 0xd3, 0x95, 0xd5, 0xe8, 0x12, 0xc6, 0x8d, 0x58, 0xba, 0x94,
	0x85, 0xc6, 0xff, 0xe5, 0xba, 0x95, 0x06, 0x57, 0x1b, 0xc5, 0x0b, 0x83, 0x3e, 0x57, 0x3f, 0x4b,
	0xac, 0xf6, 0xc1, 0x4b, 0xf4, 0x4f, 0x04, 0x93, 0x37, 0x65, 0x89, 0x85, 0xb8, 0x2c, 0x8c, 0xca,
	0x51, 0xdf, 0xc7, 0xf9, 0x18, 0xe2, 0x2d, 0x72, 0x81, 0xea, 0x1f, 0x64, 0xdf, 0x0b, 0x9e, 0xb0,
	0x54, 0x78, 0x7b, 0x44, 0x68, 0xc5, 0x1a, 0x61, 0xe5, 0x69, 0x10, 0x06, 0x93, 0x23, 0x24, 0x0c,
	0xc6, 0xe1, 0x33, 0x6b, 0xb9, 0xdb, 0xe5, 0x26, 0x58, 0xbb, 0xce, 0x3a, 0xf2, 0x4f, 0xef, 0xdc,
	0x8b, 0xf7, 0x3f, 0x85, 0x33, 0xf4, 0xe1, 0xd3, 0xde, 0xec, 0x74, 0x9e, 0x2c, 0x62, 0xb6, 0x94,
	0x1b, 0xcb, 0xf3, 0x33, 0x3b, 0xbc, 0xd0, 0x4b, 0xb8, 0xb8, 0xc3, 0x79, 0xcf, 0xe0, 0x52, 0x38,
	0xd3, 0xfb, 0xf5, 0x1a, 0xb5, 0x0e, 0x33, 0x3b, 0x5c, 0xe9, 0x47, 0xe8, 0x1f, 0x7a, 0xb7, 0x56,
	0x4e, 0xa0, 0xeb, 0xd3, 0x9e, 0x38, 0xd1, 0x5f, 0xac, 0x53, 0x70, 0xc3, 0xdd, 0x48, 0x06, 0x99,
	0x3b, 0x53, 0x0a, 0x83, 0xaf, 0x2a, 0x6f, 0x2c, 0x96, 0xf3, 0x44, 0x35, 0xcf, 0x03, 0x18, 0x06,
	0x8f, 0x0f, 0x4b, 0x09, 0x3c, 0x7c, 0xbf, 0xdf, 0x95, 0x9f, 0x0c, 0xaf, 0x0a, 0xe9, 0x0b, 0x18,
	0xd5, 0xb4, 0x40, 0x35, 0x81, 0xae, 0xb6, 0x82, 0x6b, 0x17, 0x67, 0xfe, 0xb2, 0xf8, 0x1d, 0x41,
	0x27, 0xe3, 0x37, 0x86, 0xbc, 0x82, 0xa4, 0xb6, 0x44, 0x64, 0xcc, 0x8e, 0x37, 0x7d, 0x3a, 0x61,
	0x6d, 0x7b, 0xf6, 0x1a, 0x86, 0x8d, 0x39, 0x92, 0x0b, 0xd6, 0xb6, 0x3f, 0xd3, 0x47, 0xac, 0x7d,
	0xdc, 0xcf, 0xa1, 0xeb, 0x90, 0xc8, 0x90, 0xd5, 0xf1, 0xa7, 0xe7, 0xac, 0x41, 0x4a, 0x16, 0x10,
	0x57, 0x54, 0x64, 0xc4, 0xee, 0x52, 0x4f, 0x09, 0x3b, 0x82, 0x7e, 0xdb, 0xff, 0xd6, 0xb3, 0x3f,
	0x70, 0x79, 0x7d, 0xdd, 0x73, 0xff, 0xf0, 0xcb, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x13,
	0x99, 0xc0, 0xd1, 0x03, 0x00, 0x00,
}
